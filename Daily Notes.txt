
HTML:
=====


website :webpages-->static and dynamic 


html5(2011)
1993 tim berner lee
html 4

Hyper text markup language 

		mark up--><> </>

pre defined 
.java,.css,py.....
welcome to html


welcome.html  IDE-->vscode,eclipse,....

<!doctype html>
<html>
<head>
<title>Welcome Page</title>
<!-- include other html files,css,js,.... -->
</head>

<body>

<h1>welcome to HTML  </h1>

</body>

</html>


browser-->v8 engine -->DOM TREE



	Form TAGS:
	==========

	<form name="login">
	<input type="text" name="uname"></input>
	<input type="password" name="uname"></input>
	
	</form>
	

CSS:3
=====
styles to the html page 


	3 ways 
	
	1)inline css
	2)internal css
	3)external css-->.css   <link rel="stylesheet" href="bootstrap.css">
	
	
	internal 
	css syntax:
			selector{propname1:provalue;propname2:provalue....}
	
	
	
	selector
	
			1)element selector
			2)group selector
			3)all selector  *
			4)id selector   #
			5)class selector .
	
	
	Css properties
	
HTML-->
CSS-->
JS--> 	dynamic
		front end validations			mobile :  pwd   cpwd
		change html content
		 change style 

		dynamic typed programming 
		java :static typed programming language
		
		
		var a=123;
		var b="xyz"
		
				local variables  :inside the function
				global variables :outside the function
		
		functions:
		==========
		function addOfTwo()
		{
		
		
		}
		
		addOfTwo();
		
		
		html
		
			<script>
			var  name="welcome"
			alert(name);
			document.write("welcome to javascript")
			console.log("welcome to html from console")
			</script>
		
		
		2 ways
		
			internal
			<body>
			<script>
			
			
			</script>
			
			
			external 
		
		
		myscript.js

		<head>
		<script src="myscript.js"/>
		</head>


		
		var input=document.formname.fieldname.value
		
		
		var input=document.getElementById("idname").value
	
	Arrays:
	=======
	var name="ktg";
		name="capgemini"
				
		var names[]={"ktg","capgemini","accenture"}

			
				index-->0

			names[0]


Front end validations:
======================
bootstrap


TS:
===
	*Static typed programming language


		var a=123;
		
			a="sandeep"
			
			function add(a,b)
			{
			a+b
			}
		
			add(12,13)
			add('b','a')
		TS=JS+Type



Angular:
===========

java script framework

MPA
	SPA 

MVC :Model View Controller


Employee-->id,name,salary

		model--->view--->controller
				 html


html-view,css,ts-->model


npm install -g @angular/cli

ng version
ng new projectname ----->root component (app)--->html,css,ts,spec.ts



JSON:
	{
	
	"eid":123,
	"ename":"sandeep"
	
	
	
	}
	
	URLS:
	======
@Component({
  selector: 'register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})

	With out URLS:
	==============
@Component({
  selector: 'register',
  template: `
  <h1>Welcome Registration Page</h1>
  
  `,
  styles: [`
  h1{color:red}
  
  `]
})

PIPE:
=====
ng g p pipename

predefined 

custom pipe

		"|"

forms:
======
template driven forms	:html

model driven forms


AuthGuards
-------------







Services:
=========




Java :
========


Language:
		
		english-->communication with human

Programming Language:
=====================
		communication with machine


			POP					     		OOP
B,C,BCPL,PASCAL,COBOL,PHOTON.....			c++,java,python,.net,lisp,smalltalk...


						1)performance   		inheritance, polymorphisam
						
						2)security				abstraction,encapsulation


Why Java ?  ->OAK--coffeebean

			1996 jdk 1.0  -->sun micro system -->oracle corporation -->james gosling
			
			2023 jdk 20
			
			
			
			jse 			jee 			jme
			
		JAVA:												.net :micorsoft 	
			
				1)Platform independent   :WORA
				
				2)Garbage collection	 garbage collector 
			
			
			
			machine1 			machine2     machine 3
			
			windows 11           linux            mac
				
			
			Welcome.java
			
		keywords -53 	-51
			
			https://www.javatpoint.com/javafx-how-to-install-java
			
			
			
	https://www.eclipse.org/downloads/packages/		
			
Eclipse IDE for Enterprise Java and Web Developers

		.java
		
		class 
		

Identifiers:
===========

			a-z
			A-Z
			0-9
			$
			_

Variables:
==========
		contactnum mahesh   99324201230129

variable is name given to the memory location


					local varibles
					global variables 

				syntax:
				
				datatype varname=value;

8PDT 				

byte	1 byte			-128 to 127
short	2 bytes			 -32768 to 32767  
int		4 bytes			-2147483648 to 2147483647
long 	8 bytes			 -2 power 63 to (2 power 63)-1	numeric data   byte age=30;

float	4 bytes 		21.32131232135029
double	8 bytes

boolean 1 byte			true-1,false-0
char 	2 bytes			'M' 'F'



Eclipse ,myeclipse,netbeans,intellji,vscode


									JAVA 
					JSE 					JEE									JME				
	corejava,awt,swings,applets   servlets,jsp,spring,spring...,webservices			Android
	
1)standalone/dekstop		notepad,docx,excel,eclipse,anti virus,media player
2)web applications			gmail,amazon,flipkart.....URL
3)distributed 				
4)mobile 

					byte age=30;


					local varibles	:inside the method
						
					global variables :outside the method and inside the class

								instance 
								static 


Syntax:
-------
			static int countryCode=91;
				   float marks=900;
Memory:
-------
		static properties will get memoryspace ONLY ONCE at the time of class loading into JVM.
		
		instance properties will get memoryspace for every object creation.

				class ,object-->instance of a class 
				
				syntax
						classname objname=new classname()

						A obj=new A()
Access:
-------
		INSTANCE PROPERTIES CAN BE ACCESSED BY USING OBJ REFERENCE 
		STATIC PROPERTIES CAN BE ACCESSED BY USING CLASSNAME 
Usage:
------
		COMMON DATA -->STATIC 	COUNTRYNAME,91,orgname,school,clgname....
		UNIQUE DATA-->INSTANCE 	eid,contact,aadhar,bankacnt....



Flow Control:
=============
if,else,switch,while,for,dowhile




methods:
=========

method

public static void main(String[] args) {

}


accessmodifier static/instance returntype methodname(int a,int b.....)
{



}

public,private,protected,default



public int addOfTwo(int a,int b)
{

return a+b;
}

public void subOfTwo(int a,int b)
{
System.out.println("sub of to numbers:"+(a+b));
}

public static void mulOfTwo()
{
int a=12;
int b =23;
System.out.println("sub of to numbers:"+(a*b));
}


package ,import ,scanner,wrapper classes


package

		predefined
		
		userdefined	package


oops:
=====

						1)performance   		inheritance, polymorphisam
						
						2)security				abstraction,encapsulation


inheritance:
============
	the process of aquiring the features from one class to another class.


			extends ,implements

Code Reusability

class Hello{

//100 methods


}


class Hi extends Hello{

//20 methods


}

Multiple Inheritance:
=====================
	MI Not supported by java through classes
	MI Supported by java through interfaces 


methods

	abstract 		:a method without body/implemnetation/logic
	non-abstract 	:a method with implemnetation/logic/body

abstraction:

	process of hiding internals by showcasing functionalties


	ATM


class			:class is a collection of only concrete methods

abstract class	:abstract class is combination both abstract and concrete methods 0-100
interface		:its collection of only abstract methods


		MI  :extends
			
				interface A         interface B
				{					{
				
				m1();				m1();
				}					}
		
			class C implements A,B
			{
				C c=new C();
				c.m1()
			
			m1()
			{
			
			
			}
		
			}
		
		
polymorphisam:
==============
many forms 


		method overloading
				
				
					method name is same signature is different
											no of params
											order of params
											type of params
		
		method overriding 

		method name is same and implementation is different 
		
		@Override 
		
		
	this,super,final,public,private,protected,default,constructor,encapsulation	
		
		
		
		this	:current class properties (variable,method,object,constructor)
		
		super	:parent class properties(variable,method,constructor)
		
		
		
	constructor:
================	
		1)create object/instantiation of class
		
		2)values for instance variables
		
		
		
		public int add(int a ,int b )
		{
		return a+b;
		}
		
		1)constructor never return 
		2)constructor name must be class name 
		3)constructor can be called automatically at the time object creation
		

Encapsulation:
=============
	binding the data and methods together 
	
	Employee
	
	eid
	ename
	esal
	eadd...		private data 
	
	
	and public setters and getters
	
	
	
	
	
		
Exception Handling:
====================
//with out exception handling		
		
		//system defined error messages
		//abnormal termination
		
		
//With exception handling 
		
		// user friendly error messages 
		//normal  termination

		try ,catch,finally,throw,throws




multi threading :
=================

muli tasking:

			Process based multi tasking 
					
					Executing several tasks simultaniously where each task is seperate independent process 
				
					Ex:using eclipse,teams,vscode .....
				
			Thread based multi tasking :multi threading 
				
				Executing several tasks simultaniously where each task belongs to the same process 
	
	class Test
	{
	
	segment 1
	
	
	
	segment 2
	
	
	
	
	segment n
	}
	
	
	two ways
	
	1.implements Runnable interface 
	2.extends Thread class
	
	
	class App implements Runnable (FI-->SAM--run)
	{
		run()
		{
		
		
		}
	
	}
	
	
	https://www.javamadesoeasy.com/2015/03/thread-states-thread-life-cycle-in-java.html
	
	
	
	
	public void m1()
	{
			sleep()						t1,t2,t3,t4
	
	}
	
	public synchronized void m1()  
	{
	//t1
		
	
	}
	
	Inter Thread Communication:
	===========================
	
	Object -->wait,notify,notifyAll
	
	1-100
	
	
	
	thread-1 -->even numbers -->2,4,6,8,10...wait(),notify
	
	thread-2 -->odd numbers  -->1-->notify,wait(),3,5,7,9....
	

Colections:
==============
	int marks=200;
		marks=300;

int marks1[]={200,300,400,500....}

	int arr[]=new int[10];//11th AIOE

Arrays Limitations:
====================

	1)arrays are used to store only homogeneous data

	2)arrays are fixed in size 

	3)no utility methods
	
Collections Advantages:
====================

	1)collections are used to store both homogeneous,heterogeneous data

	2)collections  are not  fixed in size   AL-->10,16(cc*3/2)+1

	3)lots utility methods	
	
	List:
	
		1)duplicates are allowed
		2)insertion order is preserved 
	
			ArrayList,LinkedList,Vector,Stack
	Set:
	
		1)duplicates are not allowed
		2)insertion order is not preserved 
	
					HashSet,LinkedHashSet,TreeSet
			
		stack-->filo
		queue-->fifo
		
		
		
		vector-10 synchronized--> AL-10  

MAP:
					HashMap,LinkedHashMap,TreeMap
					
			key,value
					
					
					
					
					
java8:
======
		lamda expressions
		FI
		P FI
		Default staitic methods
		:: OPERATORS
		datatime api
		stream api
		
				flow of data 
		
		
Datbase :
=========
MYSQL:
======
SQL-->structured query language

DDL,DML,DRL

DDL-->create,alter,drop,truncate,rename

DML-->insert,update,delete

DRL-->select

RDBMS
		create database ktg;
use ktg;
create table emps(eid int,ename varchar(15),esal int,eadd varchar(10));
alter table emps add edesg varchar(10);
describe emps;
alter table emps drop column eadd;
alter table emps change eid empno int;
alter table emps rename to employees;
#DML
insert into employees values(111,'suresh',90000,"developer");
insert into employees values(222,'rajesh',45000,"trainer");
insert into employees values(333,'somesh',65000,"admin");
insert into employees values(444,'hitesh',78000,"hr");

update employees set esal=esal+5000 where esal<75000;
update employees set esal=esal+15000;

delete from employees; 
delete from employees where edesg='admin';
#DRL
select * from employees;
select empno,ename from employees;
select * from employees where edesg='developer';
truncate table employees;
drop table employees;
select max(esal) from employees;
select min(esal) from employees;
select sum(esal) from employees;
select avg(esal) from employees;
select count(esal) from employees;

JDBC/JPA:
========
		java-->database 

			JDBC
			
			5 steps 
			
			1)load the driver class
			2)create the connection
			3)create the statement
			4)execute query
			5)close the connection
			
			
			
JPA(Java Persistence API):
==========================
Problems with JDBC 

1)create tables 
2)querys
3)checked exceptions
4)boiler plate code 



JPA-->Specification
hibernate-->ORM tools-->hibernate,eclipse,toplink,ibatis...


				JAVA--->JPA-->hibernate-->DB
			
1)no tables creation 
2)no querys
3)unchecked exceptions
4)boiler plate code removed



JPA



Entity class

	jpa annotations
	
main method class

META-INF
persistence.xml	


JPA --->persist,merge,remove,find

JPQL-->querys-->database independent 

			

spring ..springboot...case study:
=================================

Spring :
===========
	invasive,noninvasive
	light weight ,heavy weight
	loosley coupled,tightly coupled

		spring is non-invasive framework,we can create light wieght and loosley coupled application
		
		
		
		
		invasive: struts :force to developer to implement predefined api
		non-invasive:hibernate,spring :never force to the developer to implement predefined API
		
		
		
		
		thread-->extends thread,implements runnable
		
		
		Servlet:web application
		
				1)implements Servlet 5
				2)extends GenericServlet
				3)extends HttpServlet 5+6=11
		
		100*11
		class login extends HttpServlet
		{ 11
		
		}
		
		EJB heavy weight  -->Rod Johnson--->spirng -->2003 1.x----> 6.x spring ,3.x spring boot
		
		
		
		Loosley coupled & tightly coupled 

class A
{
A(String name){
}
public void m1()
{

}

}
		tightly coupled ,loosley coupled ---->spring
class B 
{
public void m2()
{
A a =new A();
a.m1()

}
}
 1000 child class




Spring core/IOC/Dependency Injection module
===========================================

		1)setter injection			<property>
		2)constructor injection		<constructor-arg>
		3)Autowiring 



			Spring container:BeanFactory,ApplicationContext

		life cyle a object
				
					1)creation of object
					2)wiring the object
					3)configuring the object
					4)destroying the object
	
A,B...											configuration file--->xml,annotation,java

			spring jars												<beans>
																	<bean>
				
		@Component,@Service,@Repository,@Autowired,@Configration,@ComponentScan

		@Bean

		NOTE:spring has given annotations for user defined classes but not for predefined classes
						
						for predefined classes we have to configure explicitly 
						@Bean

spring light weight and loosley coupled

jpa is light wieght but not loosley 





1)configuration

2)maven dependencies

3)server























